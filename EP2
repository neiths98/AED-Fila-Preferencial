#include <stdlib.h>
#include <stdio.h>
#define true 1
#define false 0
#define IDADEPREFERENCIAL 60

typedef int bool;

typedef struct aux {
    int id;
    int idade;
    struct aux* ant;
    struct aux* prox;
} ELEMENTO, * PONT;


typedef struct {
    PONT cabeca;
    PONT inicioNaoPref;
} FILAPREFERENCIAL, * PFILA;

PFILA criarFila(){
    PFILA res = (PFILA) malloc(sizeof(FILAPREFERENCIAL));
    res->cabeca = (PONT) malloc(sizeof(ELEMENTO));
    res->inicioNaoPref = res->cabeca;
    res->cabeca->id = -1;
    res->cabeca->idade = -1;
    res->cabeca->ant = res->cabeca;
    res->cabeca->prox = res->cabeca;
    return res;
}

int tamanho(PFILA f){
    PONT atual = f->cabeca->prox;
    int tam = 0;
    while (atual != f->cabeca) {
        atual = atual->prox;
        tam++;
    }
    return tam;
}

PONT buscarID(PFILA f, int id){
    PONT atual = f->cabeca->prox;
    while (atual != f->cabeca) {
        if (atual->id == id) return atual;
        atual = atual->prox;
    }
    return NULL;
}

void exibirLog(PFILA f){
    int numElementos = tamanho(f);
    printf("                                        Inicio Nao preferencial: id = %d", f->inicioNaoPref->id);//REMOVER DEPOIS
    printf("\nLog fila [elementos: %i]\t- Inicio:", numElementos);
    PONT atual = f->cabeca->prox;
    while (atual != f->cabeca) {
        printf(" [%i;%i]", atual->id, atual->idade);
        atual = atual->prox;
    }
    printf("\n                       \t-    Fim:");
    atual = f->cabeca->ant;
    while (atual != f->cabeca) {
        printf(" [%i;%i]", atual->id, atual->idade);
        atual = atual->ant;
    }
    printf("\n\n");
}






bool inserirPessoaNaFila(PFILA f, int id, int idade){
    PONT p = f->cabeca;

    // false = id < 0 || idade < 0 || pessoa ja esta na fila
    if(id < 0 || idade < 0 || buscarID(f,id) != NULL)
        return false;

    PONT novo = (PONT) malloc(sizeof(ELEMENTO));
    novo->id = id;
    novo->idade = idade;

    if(tamanho(f) == 0){
        if(idade < IDADEPREFERENCIAL)
            f->inicioNaoPref = novo;
        novo->prox = f->cabeca;
        novo->ant = f->cabeca;
        f->cabeca->prox = novo;
        f->cabeca->ant = novo;
        return true;
    }

    if(idade >= IDADEPREFERENCIAL){ // entra no fim da fila preferencial
        while (p->prox != f->inicioNaoPref){ // caso nao tenha nao preferencial, inicioNaoPref eh cabeca
            p = p->prox;
        }
        novo->prox = f->inicioNaoPref;
        novo->ant = f->inicioNaoPref->ant;
        f->inicioNaoPref->ant = novo;
        p->prox = novo;
        return true;
    } else { // entra sempre no fim da fila
        if(f->inicioNaoPref == f->cabeca)
            f->inicioNaoPref = novo;
        novo->prox = f->cabeca;
        novo->ant = f->cabeca->ant;
        f->cabeca->ant->prox = novo;
        f->cabeca->ant = novo;
        return true;
    }
}




bool atenderPrimeiraDaFila(PFILA f, int* id){
    PONT p = f->cabeca;
    if(tamanho(f) == 0)
        return false;

    *id = p->prox->id;

    p = p->prox; // elemento a ser excluido (proximo da cabeca)

    if(tamanho(f) == 1){ // reinicializa lista
        f->cabeca->prox = f->cabeca;
        f->cabeca->ant = f->cabeca;
        f->inicioNaoPref = f->cabeca;
        free(p);
        return true;
    }
    else if(p->prox->idade >= IDADEPREFERENCIAL){ // proximo da fila é preferencial -> apenas arrumar ponteiros
        f->cabeca->prox = p->prox;
        p->prox->ant = f->cabeca;
        free(p);
        return true;
    }else{
        //proximo da fila nao é preferencial -> arrumar ponteiros e inicio da fila nao preferencial
        f->cabeca->prox = p->prox;
        p->prox->ant = f->cabeca;
        f->inicioNaoPref = f->cabeca->prox;
        free(p);
        return true;
    }
}


bool desistirDaFila(PFILA f, int id){
    PONT pos = buscarID(f,id);

    if(pos == NULL) // a funcao buscarID retorna o ponteiro para o id, caso ele exista
        return false;

    // remover pos
    if(tamanho(f) == 1){ // reinicializa lista
        f->cabeca->prox = f->cabeca;
        f->cabeca->ant = f->cabeca;
        f->inicioNaoPref = f->cabeca;
        free(pos);
        return true;
    }

    // remover ultimo elemento
    if(pos->prox == f->cabeca){
        if(f->inicioNaoPref == pos)  // caso o ultimo elemento seja o inicio nao preferencial
            f->inicioNaoPref = f->cabeca;
        pos->ant->prox = f->cabeca;
        f->cabeca = pos->ant;
        free(pos);
        return true;
    }

    // remover primeiro elemento
    if(f->cabeca->prox == pos){
        if(f->inicioNaoPref == pos) // caso primeiro elemento seja o inicio nao preferencial
            f->inicioNaoPref = pos->prox;
        f->cabeca->prox = pos->prox;
        pos->prox->ant = f->cabeca;
        free(pos);
        return true;
    }

    // remover elemento no meio da fila
    else{
        if(f->inicioNaoPref == pos)
            f->inicioNaoPref = pos->prox;
        pos->prox->ant = pos->ant;
        pos->ant->prox = pos->prox;
        free(pos);
        return true;
    }
}





int main(){

    PONT f = criarFila();
    bool res;
    int id;
    int idade;

    printf("################# INSERINDO PARTE 2 ###############\n");
    exibirLog(f);
    res = inserirPessoaNaFila(f, 7, 72);
    if(res) printf("Insercao retornou true (14). [OK]\n");
    else printf("Insercao retornou false (14).\n");
    exibirLog(f);
    res = inserirPessoaNaFila(f, 8, 22);
    if(res) printf("Insercao retornou true (15). [OK]\n");
    else printf("Insercao retornou false (15).\n");
    exibirLog(f);
    res = inserirPessoaNaFila(f, 9, 60);
    if(res) printf("Insercao retornou true (16). [OK]\n");
    else printf("Insercao retornou false (16).\n");
    exibirLog(f);
    res = inserirPessoaNaFila(f, 10, 42);
    if(res) printf("Insercao retornou true (17). [OK]\n");
    else printf("Insercao retornou false (17).\n");
    exibirLog(f);


    printf("################# SAINDO DA FILA ##################\n");

    exibirLog(f);
    res = desistirDaFila(f, 6);
    if(res) printf("Desistindo da fila retornou true (18).\n");
    else printf("Desistindo da fila retornou false (18). [OK]\n");
    exibirLog(f);
    res = desistirDaFila(f, 7);
    if(res) printf("Desistindo da fila retornou true (19). [OK]\n");
    else printf("Desistindo da fila retornou false (19).\n");
    exibirLog(f);
    res = desistirDaFila(f, 8);
    if(res) printf("Desistindo da fila retornou true (20). [OK]\n");
    else printf("Desistindo da fila retornou false (20).\n");
    exibirLog(f);
    res = desistirDaFila(f, 9);
    if(res) printf("Desistindo da fila retornou true (21). [OK]\n");
    else printf("Desistindo da fila retornou false (21).\n");
    exibirLog(f);
    res = desistirDaFila(f, 10);
    if(res) printf("Desistindo da fila retornou true (22). [OK]\n");
    else printf("Desistindo da fila retornou false (22).\n");
    exibirLog(f);


    return 0;
}








